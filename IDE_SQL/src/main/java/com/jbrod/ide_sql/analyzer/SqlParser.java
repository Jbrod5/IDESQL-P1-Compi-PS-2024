
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.jbrod.ide_sql.analyzer;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SqlParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SqlParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SqlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SqlParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\010\004" +
    "\000\002\012\005\000\002\011\004\000\002\011\002\000" +
    "\002\015\005\000\002\007\005\000\002\007\002\000\002" +
    "\016\004\000\002\016\003\000\002\017\004\000\002\017" +
    "\002\000\002\013\004\000\002\014\004\000\002\014\002" +
    "\000\002\020\004\000\002\020\002\000\002\003\010\000" +
    "\002\004\013\000\002\005\012\000\002\006\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\012\017\014\021\012\023\010\025\011\001" +
    "\002\000\004\002\001\001\002\000\004\002\ufffe\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\uffff\001\002\000" +
    "\004\020\067\001\002\000\004\020\063\001\002\000\004" +
    "\020\044\001\002\000\004\002\043\001\002\000\006\007" +
    "\015\027\016\001\002\000\010\013\ufff4\016\ufff4\020\ufff4" +
    "\001\002\000\012\013\ufff2\014\040\016\ufff2\020\ufff2\001" +
    "\002\000\004\020\020\001\002\000\004\027\021\001\002" +
    "\000\004\015\036\001\002\000\006\006\uffed\016\023\001" +
    "\002\000\004\027\026\001\002\000\004\006\025\001\002" +
    "\000\004\002\uffec\001\002\000\004\004\034\001\002\000" +
    "\006\005\032\006\ufff9\001\002\000\004\006\uffee\001\002" +
    "\000\004\006\ufffc\001\002\000\004\027\026\001\002\000" +
    "\004\006\ufffa\001\002\000\004\030\035\001\002\000\006" +
    "\005\ufffb\006\ufffb\001\002\000\004\027\037\001\002\000" +
    "\014\006\ufff8\012\ufff8\016\ufff8\022\ufff8\024\ufff8\001\002" +
    "\000\004\027\042\001\002\000\010\013\ufff5\016\ufff5\020" +
    "\ufff5\001\002\000\010\013\ufff3\016\ufff3\020\ufff3\001\002" +
    "\000\004\002\000\001\002\000\004\027\021\001\002\000" +
    "\006\012\047\022\ufff6\001\002\000\004\022\052\001\002" +
    "\000\006\007\015\027\016\001\002\000\004\013\051\001" +
    "\002\000\004\022\ufff7\001\002\000\004\012\053\001\002" +
    "\000\004\030\055\001\002\000\004\013\061\001\002\000" +
    "\006\013\uffef\014\056\001\002\000\004\030\060\001\002" +
    "\000\004\013\ufff1\001\002\000\004\013\ufff0\001\002\000" +
    "\004\006\062\001\002\000\004\002\uffeb\001\002\000\004" +
    "\027\021\001\002\000\006\006\uffed\016\023\001\002\000" +
    "\004\006\066\001\002\000\004\002\uffe9\001\002\000\004" +
    "\027\021\001\002\000\004\024\071\001\002\000\006\007" +
    "\015\027\016\001\002\000\004\016\073\001\002\000\004" +
    "\027\026\001\002\000\004\006\075\001\002\000\004\002" +
    "\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\014\002\012\003\003\004\006\005\004\006" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\016" +
    "\001\001\000\002\001\001\000\004\017\040\001\001\000" +
    "\002\001\001\000\004\015\021\001\001\000\002\001\001" +
    "\000\004\020\023\001\001\000\006\010\027\012\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\044\001\001\000\004\007" +
    "\045\001\001\000\002\001\001\000\004\016\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\053\001\001\000\002\001\001\000\004\014\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\063" +
    "\001\001\000\004\020\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\067\001\001\000\002\001\001" +
    "\000\004\016\071\001\001\000\002\001\001\000\006\010" +
    "\073\012\026\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SqlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SqlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SqlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    //Conectar parser al scanner
    public SqlParser(SqlLexer lex){
        super(lex);
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("Simbolo con error:" + symbl_name_from_id(cur_token.sym));
        System.out.println("Linea " + cur_token.left);
        System.out.println("Columna " + cur_token.right);
        if (expected_token_ids().isEmpty()) {
            System.out.println("ya no se esperaba ningun simbolo");
        }
    }
    
    /*public void unrecovered_syntax_error(Symbol cur_token) {
        System.out.println("Error irrecuperable sobrecargado");
    }*/



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SqlParser$actions {
  private final SqlParser parser;

  /** Constructor */
  CUP$SqlParser$actions(SqlParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SqlParser$do_action_part00000000(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack            CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SqlParser$result;

      /* select the action based on the action number */
      switch (CUP$SqlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // instruccion ::= seleccionar 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= instruccion EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		RESULT = start_val;
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SqlParser$parser.done_parsing();
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruccion ::= insertar 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= actualizar 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= eliminar 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // condiciones ::= condicion_seleccion concat_condiciones 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("condiciones",6, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // condicion_seleccion ::= IDENTIFIER RELOP VALUE 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("condicion_seleccion",8, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // concat_condiciones ::= LOGICALOP condicion_seleccion 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("concat_condiciones",7, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // concat_condiciones ::= 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("concat_condiciones",7, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // path_archivo ::= IDENTIFIER DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("path_archivo",11, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // columnas_insertar ::= LPAR listado_columnas RPAR 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("columnas_insertar",5, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // columnas_insertar ::= 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("columnas_insertar",5, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listado_columnas ::= IDENTIFIER listado_columnas_concat 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("listado_columnas",12, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // listado_columnas ::= ALLCOLUMNS 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("listado_columnas",12, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listado_columnas_concat ::= COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("listado_columnas_concat",13, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listado_columnas_concat ::= 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("listado_columnas_concat",13, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_valores ::= VALUE lista_valores_concat 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("lista_valores",9, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_valores_concat ::= COMMA VALUE 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("lista_valores_concat",10, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_valores_concat ::= 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("lista_valores_concat",10, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // filtrar ::= FILTRAR condiciones 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("filtrar",14, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // filtrar ::= 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("filtrar",14, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // seleccionar ::= SELECCIONAR listado_columnas EN path_archivo filtrar EOINSTR 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("seleccionar",1, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // insertar ::= INSERTAR EN path_archivo columnas_insertar VALORES LPAR lista_valores RPAR EOINSTR 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("insertar",2, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // actualizar ::= ACTUALIZAR EN path_archivo ASIGNAR listado_columnas FILTRAR condiciones EOINSTR 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("actualizar",3, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // eliminar ::= ELIMINAR EN path_archivo filtrar EOINSTR 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("eliminar",4, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SqlParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SqlParser$do_action(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack            CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
              return CUP$SqlParser$do_action_part00000000(
                               CUP$SqlParser$act_num,
                               CUP$SqlParser$parser,
                               CUP$SqlParser$stack,
                               CUP$SqlParser$top);
    }
}

}
