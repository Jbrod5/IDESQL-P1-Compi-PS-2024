
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.jbrod.ide_sql.app.analyzer;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SqlParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SqlParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SqlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SqlParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\012\004" +
    "\000\002\014\005\000\002\013\005\000\002\013\002\000" +
    "\002\017\005\000\002\007\005\000\002\007\002\000\002" +
    "\010\004\000\002\010\003\000\002\011\005\000\002\011" +
    "\002\000\002\015\004\000\002\016\005\000\002\016\002" +
    "\000\002\020\004\000\002\020\002\000\002\003\010\000" +
    "\002\004\013\000\002\005\012\000\002\006\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\012\022\010\023\012\024\014\025\011\001" +
    "\002\000\004\002\001\001\002\000\004\002\ufffe\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\uffff\001\002\000" +
    "\004\017\072\001\002\000\004\017\066\001\002\000\004" +
    "\017\046\001\002\000\004\002\045\001\002\000\006\007" +
    "\015\027\016\001\002\000\010\013\ufff4\016\ufff4\017\ufff4" +
    "\001\002\000\012\013\ufff2\014\041\016\ufff2\017\ufff2\001" +
    "\002\000\004\017\020\001\002\000\004\027\021\001\002" +
    "\000\004\015\037\001\002\000\006\006\uffed\016\023\001" +
    "\002\000\004\027\026\001\002\000\004\006\025\001\002" +
    "\000\004\002\uffec\001\002\000\004\004\035\001\002\000" +
    "\006\005\032\006\ufff9\001\002\000\004\006\uffee\001\002" +
    "\000\004\006\ufffc\001\002\000\004\027\026\001\002\000" +
    "\006\005\032\006\ufff9\001\002\000\004\006\ufffa\001\002" +
    "\000\004\030\036\001\002\000\006\005\ufffb\006\ufffb\001" +
    "\002\000\004\027\040\001\002\000\014\006\ufff8\012\ufff8" +
    "\016\ufff8\020\ufff8\021\ufff8\001\002\000\004\027\043\001" +
    "\002\000\010\013\ufff5\016\ufff5\017\ufff5\001\002\000\012" +
    "\013\ufff2\014\041\016\ufff2\017\ufff2\001\002\000\010\013" +
    "\ufff3\016\ufff3\017\ufff3\001\002\000\004\002\000\001\002" +
    "\000\004\027\021\001\002\000\006\012\051\020\ufff6\001" +
    "\002\000\004\020\054\001\002\000\006\007\015\027\016" +
    "\001\002\000\004\013\053\001\002\000\004\020\ufff7\001" +
    "\002\000\004\012\055\001\002\000\004\030\057\001\002" +
    "\000\004\013\064\001\002\000\006\013\uffef\014\060\001" +
    "\002\000\004\030\062\001\002\000\004\013\ufff1\001\002" +
    "\000\006\013\uffef\014\060\001\002\000\004\013\ufff0\001" +
    "\002\000\004\006\065\001\002\000\004\002\uffeb\001\002" +
    "\000\004\027\021\001\002\000\006\006\uffed\016\023\001" +
    "\002\000\004\006\071\001\002\000\004\002\uffe9\001\002" +
    "\000\004\027\021\001\002\000\004\021\074\001\002\000" +
    "\006\007\015\027\016\001\002\000\004\016\076\001\002" +
    "\000\004\027\026\001\002\000\004\006\100\001\002\000" +
    "\004\002\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\014\002\012\003\003\004\006\005\004\006" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\016" +
    "\001\001\000\002\001\001\000\004\011\041\001\001\000" +
    "\002\001\001\000\004\017\021\001\001\000\002\001\001" +
    "\000\004\020\023\001\001\000\006\012\027\014\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\032\001\001\000\004\013\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\046\001\001\000\004\007\047" +
    "\001\001\000\002\001\001\000\004\010\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\055\001\001\000\002\001\001\000\004\016\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\066\001\001\000\004\020\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\072\001" +
    "\001\000\002\001\001\000\004\010\074\001\001\000\002" +
    "\001\001\000\006\012\076\014\026\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SqlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SqlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SqlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    //Conectar parser al scanner
    public SqlParser(SqlLexer lex){
        super(lex);
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("Simbolo con error:" + symbl_name_from_id(cur_token.sym));
        System.out.println("Linea " + cur_token.left);
        System.out.println("Columna " + cur_token.right);
        if (expected_token_ids().isEmpty()) {
            System.out.println("ya no se esperaba ningun simbolo");
        }
    }
    
    /*public void unrecovered_syntax_error(Symbol cur_token) {
        System.out.println("Error irrecuperable sobrecargado");
    }*/



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SqlParser$actions {
  private final SqlParser parser;

  /** Constructor */
  CUP$SqlParser$actions(SqlParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SqlParser$do_action_part00000000(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack            CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SqlParser$result;

      /* select the action based on the action number */
      switch (CUP$SqlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // instruccion ::= seleccionar 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		  System.out.println(s);  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= instruccion EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		RESULT = start_val;
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SqlParser$parser.done_parsing();
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruccion ::= insertar 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		  System.out.println(i);  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= actualizar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		  System.out.println(a);  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= eliminar 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		  System.out.println(e);  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // condiciones ::= condicion_seleccion concat_condiciones 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 String condiciones = new String(cs.toString() + cc.toString());
                   RESULT = condiciones; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("condiciones",8, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // condicion_seleccion ::= IDENTIFIER RELOP VALUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int rlpleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int rlpright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String rlp = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String vl = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 String condicion_seleccion = id + rlp + vl;
                           RESULT = condicion_seleccion; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("condicion_seleccion",10, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // concat_condiciones ::= LOGICALOP condicion_seleccion concat_condiciones 
            {
              Object RESULT =null;
		int lgleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int lgright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String lg = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 String concat_condiciones = lg + cs + cc;
                       RESULT = concat_condiciones; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("concat_condiciones",9, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // concat_condiciones ::= 
            {
              Object RESULT =null;
		RESULT = new String("");
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("concat_condiciones",9, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // path_archivo ::= IDENTIFIER DOT IDENTIFIER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 String path = a + "." + "b";
                   RESULT = path;  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("path_archivo",13, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // columnas_insertar ::= LPAR listado_columnas RPAR 
            {
              Object RESULT =null;
		int list_colleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int list_colright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object list_col = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		String listado_columnas = "("+list_col+")";
                        RESULT = listado_columnas;
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("columnas_insertar",5, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // columnas_insertar ::= 
            {
              Object RESULT =null;
		  RESULT = new String("");  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("columnas_insertar",5, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listado_columnas ::= IDENTIFIER listado_columnas_concat 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int liscolleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int liscolright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object liscol = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		String r = id + liscol; RESULT = r;
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("listado_columnas",6, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // listado_columnas ::= ALLCOLUMNS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		RESULT = new String(a); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("listado_columnas",6, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listado_columnas_concat ::= COMMA IDENTIFIER listado_columnas_concat 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int lccleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lccright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object lcc = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		RESULT = new String(c + id + lcc);
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("listado_columnas_concat",7, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listado_columnas_concat ::= 
            {
              Object RESULT =null;
		 RESULT = new String(""); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("listado_columnas_concat",7, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_valores ::= VALUE lista_valores_concat 
            {
              Object RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String vl = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int lsvlleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lsvlright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object lsvl = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		RESULT = new String(vl + lsvl); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("lista_valores",11, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_valores_concat ::= COMMA VALUE lista_valores_concat 
            {
              Object RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String cm = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String vl = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int lvcleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int lvcright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object lvc = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		RESULT = new String(cm+vl+lvc); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("lista_valores_concat",12, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_valores_concat ::= 
            {
              Object RESULT =null;
		  RESULT = new String(""); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("lista_valores_concat",12, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // filtrar ::= FILTRAR condiciones 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		RESULT = new String(f + c); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("filtrar",14, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // filtrar ::= 
            {
              Object RESULT =null;
		  RESULT = new String(""); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("filtrar",14, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // seleccionar ::= SELECCIONAR listado_columnas EN path_archivo filtrar EOINSTR 
            {
              Object RESULT =null;
		int selleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int selright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		String sel = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Object lc = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object pt = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ei = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		RESULT = new String(sel+lc+en+pt+fl+ei);  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("seleccionar",1, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // insertar ::= INSERTAR EN path_archivo columnas_insertar VALORES LPAR lista_valores RPAR EOINSTR 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		Object pt = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		Object ci = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		String vl = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String lp = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String rp = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ei = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new String(in + en + pt + ci + vl + lp + ls + rp + ei);   
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("insertar",2, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // actualizar ::= ACTUALIZAR EN path_archivo ASIGNAR listado_columnas FILTRAR condiciones EOINSTR 
            {
              Object RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		String ac = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		Object pt = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Object lc = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ei = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		RESULT = new String(ac + en + pt + as + lc + fl + co + ei);   
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("actualizar",3, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // eliminar ::= ELIMINAR EN path_archivo filtrar EOINSTR 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object pt = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ei = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		  RESULT = new String(el+en+pt+fl+ei);  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("eliminar",4, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SqlParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SqlParser$do_action(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack            CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
              return CUP$SqlParser$do_action_part00000000(
                               CUP$SqlParser$act_num,
                               CUP$SqlParser$parser,
                               CUP$SqlParser$stack,
                               CUP$SqlParser$top);
    }
}

}
