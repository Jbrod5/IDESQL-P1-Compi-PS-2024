package com.jbrod.ide_sql.app.analyzer;
import java_cup.runtime.*;

parser code{:

    //Conectar parser al scanner
    public SqlParser(SqlLexer lex){
        super(lex);
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("Simbolo con error:" + symbl_name_from_id(cur_token.sym));
        System.out.println("Linea " + cur_token.left);
        System.out.println("Columna " + cur_token.right);
        if (expected_token_ids().isEmpty()) {
            System.out.println("ya no se esperaba ningun simbolo");
        }
    }
    
    /*public void unrecovered_syntax_error(Symbol cur_token) {
        System.out.println("Error irrecuperable sobrecargado");
    }*/

:}


/* - - - - - - - - - - - - - - -Terminales - - - - - - - - - - - - - - - - */
terminal String RELOP, LOGICALOP;
terminal String EOINSTR, ALLCOLUMNS;
terminal String LCURLYBRKT, RCURLYBRKT, LPAR, RPAR;
terminal String COMMA, DOT;
terminal String FILTRAR, EN,  VALORES, ASIGNAR;
terminal String ACTUALIZAR, INSERTAR, SELECCIONAR, ELIMINAR;
terminal String DIGIT, IDENTIFIER, VALUE, ERROR;

/* - - - - - - - - - - - - - - No terminales - - - - - - - - - - - - - - - */
/* Instrucciones */
non terminal instruccion, seleccionar, insertar, actualizar, eliminar;

/* Recurrentes */
non terminal columnas_insertar, listado_columnas, listado_columnas_concat;
non terminal condiciones, concat_condiciones, condicion_seleccion;
non terminal lista_valores, lista_valores_concat;

non terminal path_archivo,  filtrar;


/* - - - - - - - - - - - - - - Producciones - - - - - - - - - - - - - - -  */
instruccion ::= seleccionar:s {:  System.out.println(s);  :}
                | insertar:i {:  System.out.println(i);  :} 
                | actualizar:a {:  System.out.println(a);  :}
                | eliminar:e {:  System.out.println(e);  :};

/* Expresiones recurrentes */
condiciones ::= condicion_seleccion:cs concat_condiciones:cc
                {: String condiciones = new String(cs.toString() + cc.toString());
                   RESULT = condiciones; :};
condicion_seleccion ::= IDENTIFIER:id RELOP:rlp VALUE:vl
                        {: String condicion_seleccion = id + rlp + vl;
                           RESULT = condicion_seleccion; :};
concat_condiciones ::= LOGICALOP:lg condicion_seleccion:cs concat_condiciones:cc
                    {: String concat_condiciones = lg + cs + cc;
                       RESULT = concat_condiciones; :}
                    | /* epsilon */ {:RESULT = new String("");:};




path_archivo ::= IDENTIFIER:a DOT IDENTIFIER:b 
                {: String path = a + "." + "b";
                   RESULT = path;  :};




columnas_insertar ::= LPAR listado_columnas:list_col RPAR 
                      {:String listado_columnas = "("+list_col+")";
                        RESULT = listado_columnas;:}
                    | /*epsilon*/{:  RESULT = new String("");  :};

listado_columnas ::= IDENTIFIER:id listado_columnas_concat:liscol
                    {:String r = id + liscol; RESULT = r;:}
                    | ALLCOLUMNS: a 
                    {:RESULT = new String(a); :};

listado_columnas_concat ::= COMMA:c IDENTIFIER:id listado_columnas_concat:lcc
                            {:RESULT = new String(c + id + lcc);:}
                            | /*epsilon*/ {: RESULT = new String(""); :};





lista_valores ::= VALUE:vl lista_valores_concat:lsvl
                {:RESULT = new String(vl + lsvl); :};  

lista_valores_concat ::= COMMA:cm VALUE:vl lista_valores_concat:lvc
                        {:RESULT = new String(cm+vl+lvc); :} 
                        | /*epsilon*/ {:  RESULT = new String(""); :}; 





filtrar ::= FILTRAR:f condiciones:c
            {:RESULT = new String(f + c); :} 
            | /*epsilon*/ {:  RESULT = new String(""); :};



/* Instrucciones */
seleccionar ::= SELECCIONAR:sel listado_columnas:lc EN:en path_archivo:pt filtrar:fl EOINSTR:ei
                {:RESULT = new String(sel+lc+en+pt+fl+ei);  :};

insertar ::= INSERTAR:in EN:en path_archivo:pt columnas_insertar:ci VALORES:vl  LPAR:lp lista_valores:ls RPAR:rp EOINSTR:ei
                {: RESULT = new String(in + en + pt + ci + vl + lp + ls + rp + ei);   :};

actualizar ::= ACTUALIZAR:ac EN:en path_archivo:pt ASIGNAR:as listado_columnas:lc FILTRAR:fl condiciones:co EOINSTR:ei
                {:RESULT = new String(ac + en + pt + as + lc + fl + co + ei);   :};

eliminar ::= ELIMINAR:el EN:en path_archivo:pt filtrar:fl EOINSTR:ei
            {:  RESULT = new String(el+en+pt+fl+ei);  :};

