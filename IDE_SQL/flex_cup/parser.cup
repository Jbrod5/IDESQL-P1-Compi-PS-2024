package com.jbrod.ide_sql.analyzer;
import java_cup.runtime.*;

parser code{:

    //Conectar parser al scanner
    public SqlParser(SqlLexer lex){
        super(lex);
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("Simbolo con error:" + symbl_name_from_id(cur_token.sym));
        System.out.println("Linea " + cur_token.left);
        System.out.println("Columna " + cur_token.right);
        if (expected_token_ids().isEmpty()) {
            System.out.println("ya no se esperaba ningun simbolo");
        }
    }
    
    /*public void unrecovered_syntax_error(Symbol cur_token) {
        System.out.println("Error irrecuperable sobrecargado");
    }*/

:}


/* Terminales */
terminal        RELOP, LOGICALOP, EOINSTR, ALLCOLUMNS, LCURLYBRKT, RCURLYBRKT, COMMA, DOT, FILTRAR, SELECCIONAR, EN, INSERTAR, VALORES, ACTUALIZAR, ASIGNAR, ELIMINAR;
terminal String DIGIT, IDENTIFIER, VALUE, ERROR;

/* No terminales */
non terminal instruccion, seleccionar, insertar, actualizar, eliminar, columnas_insertar, condiciones, condicion_seleccion, lista_valores, path_archivo, listado_columnas, filtrar;

/* Producciones */
instruccion ::= seleccionar | insertar | actualizar | eliminar;
seleccionar ::= SELECCIONAR listado_columnas EN path_archivo filtrar EOINSTR;
insertar ::= INSERTAR EN path_archivo columnas_insertar VALORES (lista_valores) EOINSTR;
actualizar ::= ACTUALIZAR EN path_archivo ASIGNAR listado_columnas FILTRAR condiciones EOINSTR;
eliminar ::= ELIMINAR EN path_archivo filtrar EOINSTR;
columnas_insertar ::= (listado_columnas) | /*epsilon*/;
condiciones ::= condicion_seleccion {LOGICALOP condicion_seleccion};
condicion_seleccion ::= IDENTIFIER RELOP VALUE;
lista_valores ::= VALUE {COMMA VALUE};  
path_archivo ::= IDENTIFIER DOT IDENTIFIER;
listado_columnas ::= IDENTIFIER {COMMA IDENTIFIER};
filtrar ::= FILTRAR condiciones | /*epsilon*/;
